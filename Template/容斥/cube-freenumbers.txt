题意：给定一个区间，求不能表示成k*x*x*x(x>1)的个数。
博客园  首页  新随笔  新文章  联系  管理  订阅 订阅
【HUST】1214 Cubic-free numbers II
题意：给定一个区间，求不能表示成k*x*x*x(x>1)的个数。
区间转化为两个1～n，可以先求出能够表示成k*x*x*x(x>1)的个数。
不妨假设x是某个素数，1～n中有n/(x^3)个值，x^3，2*x^3,……，n/(x^3)*x^3。
假设t不是素数，可以表示t=k*x。那么t^3=(k*x)^3=k^3*x^3。显然会与x统计重复。
所以，可以枚举素数的三次方，得到一个答案。
但是，6^3=(2^3)*(3^3)，被计算了两次。因此，需要用到容斥原理。

#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <climits>
#include <cmath>
#include <ctime>
#include <cassert>
#define IOS ios_base::sync_with_stdio(0); cin.tie(0);
using namespace std;
typedef long long ll;
const double eps = 1e-8;
const int MAX_N = 20000100;

ll num[MAX_N];

ll solve(ll n){
    if(n <= 0) return 0;
    ll top = (ll)(pow(n * 1.0, 1.0 / 3.0) + eps);
    ll ans = 0;
    for(ll i = top; i >= 2; --i) {
        num[i] = n / (i * i * i);
        for(ll j = 2; j * i <= top; ++j) {
            num[i] -= num[j * i];
        }
        ans += num[i];
    }
    return n - ans;
}

int main(){
    int T;
    ll L, R;
    scanf("%d", &T);
    while(T--) {
        scanf("%lld%lld", &L, &R);
        printf("%lld\n", solve(R - 1) - solve(L - 1));
    }
    return 0;
}