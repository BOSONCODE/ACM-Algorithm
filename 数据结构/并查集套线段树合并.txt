//树上求解点x的连边中rank为k的点 支持加边操作
#include <bits/stdc++.h>
using namespace std; 

#define maxn 100005
int ranka[maxn];
int fa[maxn];
int id[maxn];

int find(int x){ return fa[x] == x?fa[x] : fa[x] = find(fa[x]); }

struct node{
	int l, r;
	int val;
}tree[maxn*30];

int tot = 0;
int root[maxn];

void insert(int &rt, int l, int r, int k, int val){
	rt = ++tot;
	tree[rt].val += val;
	if(l == r) return ;
	int mid = (l + r)/2;
	if(mid >= k) insert(tree[rt].l, l, mid, k, val);
	else insert(tree[rt].r, mid + 1, r, k, val);
}

int merge(int x, int y){
	if(!x || !y) return x | y;
	tree[x].l = merge(tree[x].l, tree[y].l);
	tree[x].r = merge(tree[x].r, tree[y].r);
	tree[x].val += tree[y].val;
	return x;
}

void unite(int x, int y){
	int fx = find(x);
	int fy = find(y);
	if(fx == fy) return ;
	fa[fy] = fx;
	root[fx] = merge(root[fx], root[fy]);
}

int query(int rt, int l, int r, int k){
	if(l == r) return l;
	int mid = (l + r)/2;
	if(k <= tree[tree[rt].l].val) return query(tree[rt].l, l, mid, k);
	else return query(tree[rt].r, mid + 1, r, k - tree[tree[rt].l].val);
}

int main(){
	int n, m; scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; ++i) {
		scanf("%d", &ranka[i]), fa[i] = i, id[ranka[i]] = i;
		insert(root[i], 1, n, ranka[i], 1);
	}
	for (int i = 1; i <= m; ++i){
		int x, y; scanf("%d%d", &x, &y);
		unite(x, y);
	}
	int q; scanf("%d", &q);
	while(q-->0){
		char op[2]; scanf("%s", op);
		int x, y; scanf("%d%d", &x, &y);
		if(op[0] == 'Q'){
			int fx = find(x);
			if(tree[root[fx]].val < y) printf("-1\n");
			else{
				printf("%d\n", id[query(root[fx], 1, n, y)]);
			}
		}else{
			unite(x, y);
		}
	}
	return 0;
}