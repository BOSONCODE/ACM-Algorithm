bool used[maxn];
int linker[maxn];
vector<int>g[maxn];
int vm[maxn], um[maxn];

void init(int n){
	for (int i = 0; i < n + n + 1; ++i)
		g[i].clear();
	memset(vm, -1, sizeof vm);
	memset(um, -1, sizeof um);
}
void addedge(int u, int v){
	g[u].push_back(v);
	g[v].push_back(u);
}
bool find(int u){
	int len = (int)g[u].size();
	for (int i = 0; i < len; ++i){
		int v = g[u][i];
		if(!used[v]) {
			used[v] = true;
			if(vm[v] == -1 || find(vm[v])){
				vm[v] = u; um[u] = v;
				return true;
			}
		}
	}
	return false;
}

int hungary(int n){
	int res = 0;
	for (int i = 1; i <= n; ++i){ //左图节点的编号 1 - n
		memset(used, false, sizeof used);
		if(find(i)) ++res;
	}
	return res; //返回最大匹配的点
}

// 顶点、边的编号均从 0 开始
// 邻接表储存

struct Edge{
    int from;
    int to;
    int weight;
    Edge(int f, int t, int w):from(f), to(t), weight(w) {}
};

vector<int> G[__maxNodes]; /* G[i] 存储顶点 i 出发的边的编号 */
vector<Edge> edges;
typedef vector<int>::iterator iterator_t;
int num_nodes, num_left, num_right, num_edges;
int matching[__maxNodes]; /* 存储求解结果 */
int check[__maxNodes];

bool dfs(int u){
    for (iterator_t i = G[u].begin(); i != G[u].end(); ++i) { // 对 u 的每个邻接点
        int v = edges[*i].to;
        if (!check[v]) {     // 要求不在交替路中
            check[v] = true; // 放入交替路
            if (matching[v] == -1 || dfs(matching[v])) {
                // 如果是未盖点，说明交替路为增广路，则交换路径，并返回成功
                matching[v] = u;
                matching[u] = v;
                return true;
            }
        }
    }
    return false; // 不存在增广路，返回失败
}

int hungarian(){
    int ans = 0;
    memset(matching, -1, sizeof(matching));
    for (int u=0; u < num_left; ++u) {
        if (matching[u] == -1) {
            memset(check, 0, sizeof(check));
            if (dfs(u))
                ++ans;
        }
    }
    return ans;
}
queue<int> Q;
int prev[__maxNodes];
int Hungarian(){
    int ans = 0;
    memset(matching, -1, sizeof(matching));
    memset(check, -1, sizeof(check));
    for (int i=0; i<num_left; ++i) {
        if (matching[i] == -1) {
            while (!Q.empty()) Q.pop();
            Q.push(i);
            prev[i] = -1; // 设 i 为路径起点
            bool flag = false; // 尚未找到增广路
            while (!Q.empty() && !flag) {
                int u = Q.front();
                for (iterator_t ix = G[u].begin(); ix != G[u].end() && !flag; ++ix) {
                    int v = edges[*ix].to;
                    if (check[v] != i) {
                        check[v] = i;
                        Q.push(matching[v]);
                        if (matching[v] >= 0) { // 此点为匹配点
                            prev[matching[v]] = u;
                        } else { // 找到未匹配点，交替路变为增广路
                            flag = true;
                            int d=u, e=v;
                            while (d != -1) {
                                int t = matching[d];
                                matching[d] = e;
                                matching[e] = d;
                                d = prev[d];
                                e = t;
                            }
                        }
                    }
                }
                Q.pop();
            }
            if (matching[i] != -1) ++ans;
        }
    }
    return ans;
}