#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<bitset>
#include<queue>
using namespace std;

struct MCMF{
	static const int N = 2005, M = 10005;
	const int inf = 1e9;
	struct node{
		int from, to, nxt;
		int cap, flow;
		int cost;
		node() {}
		node(int from, int to, int nxt, int cap, int cost) :
			from(from), to(to), nxt(nxt), cap(cap), flow(0), cost(cost) {}
	} E[M];
	int dis[N];
	int G[N], pre[N], vis[N], n, m;
	void init(int n){
		this->n = n;
		this->m = 0;
		fill(G, G + n, -1);
	}
	void add(int u, int v, int f, int c){
		E[m] = node(u, v, G[u], f, +c);
		G[u] = m++;
		E[m] = node(v, u, G[v], 0, -c);
		G[v] = m++;
	}
	bool bfs(int S, int T){
		fill(vis, vis + n, 0);
		fill(dis, dis + n, inf);
		queue<int> queue;
		dis[S] = 0;
		queue.push(S);
		for (; !queue.empty(); queue.pop()){
			int u = queue.front();
			vis[u] = false;
			for (int it = G[u]; ~it; it = E[it].nxt)
			{
				int v = E[it].to;
				if (E[it].cap > E[it].flow && dis[v] > dis[u] + E[it].cost)
				{
					dis[v] = dis[u] + E[it].cost;
					pre[v] = it;
					if (!vis[v]) queue.push(v);
					vis[v] = true;
				}
			}
		}
		return dis[T] < 0; 
	}
	int Mincost(int S, int T){
		int max_flow = 0;
		int min_cost = 0;
		while (bfs(S, T)){
			int delta = inf;
			for (int u = T; u != S; u = E[pre[u]].from){
				delta = min(delta, E[pre[u]].cap - E[pre[u]].flow);
			}
			min_cost += delta * dis[T];
			max_flow += delta;
			for (int u = T; u != S; u = E[pre[u]].from)
			{
				E[pre[u]].flow += delta;
				E[pre[u] ^ 1].flow -= delta;
			}
		}
		return  min_cost;
	}
};

int main(){
	int n, m;
	int a, b, c, d;
	int u, v, w;
	MCMF gg;
	while (scanf("%d%d", &n, &m) == 2){
		gg.init(n + 2);
		int S = 0, T = n + 1;
		int pos = 0;
		while(n--){
			scanf("%d%d%d%d", &a, &b, &c, &d);
			gg.add(S, ++pos, b, a);
			gg.add(pos, T, d, -c);
		}
		while(m--){
			scanf("%d%d%d", &u, &v, &w);
			gg.add(u, v, gg.inf, w);
			gg.add(v, u, gg.inf, w);
		}
		int res = gg.Mincost(S, T);
		printf("%d\n", -res);
	}
	return 0;
}