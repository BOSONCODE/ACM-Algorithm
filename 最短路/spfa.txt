#define maxn 1000005

struct node{
    int from, to, w, nxt;
}e[maxn << 1];

int head[maxn], vis[maxn], dist[maxn];
int n, m, st, en, tot;

void init(){
    memset(head, -1, sizeof head);
    tot = 0;
}

void addedge(int u, int v, int w){
    e[tot].from = u;
    e[tot].to = v;
    e[tot].w = w;
    e[tot].nxt = head[u];
    head[u] = tot++;
}

const int INF = 1 << 20;

int spfa(int s, int en){
    queue<int>q;
    for (int i = 0; i <= n; ++i) dist[i] = INF;
    memset(vis, 0, sizeof vis);
    q.push(s); dist[s] = 0;
    while(!q.empty()){
        int u = q.front(); q.pop();
        vis[u] = 0;
        for (int i = head[u]; ~i; i = e[i].nxt){
            int v = e[i].to;
            if(dist[v] > dist[u] + e[i].w){
                dist[v] = dist[u] + e[i].w;
                if(!vis[v]){
                    vis[v] = 1;
                    q.push(v);
                }
            }
        }
    }
    return dist[en];
}

int main(){
    init();
    scanf("%d%d%d%d", &n, &m, &st, &en);
    for (int i = 1; i <= m; ++i){
        int u, v, w; scanf("%d%d%d", &u, &v, &w);
        addedge(u, v, w); addedge(v, u, w);
    }
    printf("%d\n", spfa(st, en));
    return 0;
}


//spfaÓÅ»¯
deque<int>Q;

void spfa( ){
    memset( dis , 127/2 , sizeof(dis) ) ;
    dis[1] = 0 , mark[1] = true ;
    Q.push_back( 1 ) ;
    while( !Q.empty( ) )
    {
        int u = Q.front( ) ; Q.pop_front( ) ; mark[u] = false ;
    
        for( int i = head[u] ; ~i ; i = edge[i].nxt )
        {
            int v = edge[i].to ; 
            if( dis[v] > dis[u] + edge[i].val )
            {
                dis[v] = dis[u] + edge[i].val ;
                if( !mark[v] )
                {
                    mark[v] = true ; 
                    if( Q.empty( ) || dis[v] > dis[Q.front( )]  ) Q.push_back( v ) ;
                    else Q.push_front( v ) ;
                    
                }
            
            }
        }
    }
    if( dis[n] == 1061109567 ) printf( "%d\n" , -1 ) ;
    else printf( "%d\n" , dis[n] ) ;
}